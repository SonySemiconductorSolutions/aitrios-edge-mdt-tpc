name: Run CI Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py_ver: ["3.8", "3.9", "3.10", "3.11"]
        imx500_conv_ver: ["3.16"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.py_ver}}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt          
          pip install imx500-converter==${{matrix.imx500_conv_ver}}
          pip install torch torchvision onnx onnxruntime onnxruntime-extensions
          pip install pytest pytest-mock
          pip check
          pip list
      - name: Run pytest
        run: |
          pytest tests
  build:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: get new dev tag
        shell: bash
        run : |
          pip install packaging
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0)          
          latest_tag_without_v=${latest_tag#v}
          new_version=$(python -c "
          from packaging.version import parse
          v = parse('$latest_tag_without_v')
          if v.is_devrelease:
              print(f'{v.major}.{v.minor}.{v.micro}.dev{v.dev + 1}')
          else:
              print(f'{v.major}.{v.minor+1}.0.dev0')
          ")
          echo "new_ver=${new_version}"  >> $GITHUB_ENV
          echo "new_tag=v${new_version}" >> $GITHUB_ENV
          echo "cat GITHUB_ENV"
          cat $GITHUB_ENV

      - name: update name and version to dev
        shell: bash
        run: |
          echo "__version__ = '${{ env.new_ver }}'" >  ai_toolchain_tpc/version.py
          echo "print ai_toolchain_tpc/version.py"
          cat ai_toolchain_tpc/version.py
        
          sed -i 's/name = ai_toolchain_tpc/name = ai_toolchain_tpc-dev/' setup.cfg
          echo "print setup.cfg"
          cat setup.cfg

      - name: Build wheel
        run: |
          pip install build
          python -m build --wheel

      - name: Publish package pypi
        shell: bash
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          pip install twine
          twine upload --repository pypi dist/* -u __token__ -p ${{ secrets.PYPI_API_KEY }}
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}